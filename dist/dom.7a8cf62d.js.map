{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","textContent","innerText","html","style","Object","obj","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeAttribute","find","selector","scope","querySelectorAll","child","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.7a8cf62d.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n    create(string) {\n        const container = document.createElement(\"template\")\n        container.innerHTML = string.trim();\n        return container.content.firstChild;\n    },\n    after(node, node2) { //在 node2 后面创建 node\n        node.parentNode.insertBefore(node2, node.nextSibling);\n    },\n    before(node, node2) { //在 node2 前面创建 node\n        node.parentNode.insertBefore(node2, node);\n    },\n    append(parent, node) { //在parent标签最后添加node\n        parent.appendChild(node);\n    },\n    wrap(node, parent) { //实现node添加父元素\n        dom.before(node, parent); //node前面创建parent\n        dom.append(parent, node); //在parent标签里插入node\n    },\n    remove(node) {\n        node.parentNode.removeChild(node) //原生只能通过父元素删除子元素\n        return node\n    },\n    empty(node) {\n        const array = [];\n        let x = node.firstChild\n        while (x) {\n            //逐一删除「子元素」，并将删除的「子元素」push到一个新数组里\n            array.push(dom.remove(node.firstChild))\n            x = node.firstChild\n        }\n        return array\n    },\n    attr(node, name, value) {\n        if (arguments.length === 3) {\n            node.setAttribute(name, value)\n        } else if (arguments.length === 2) {\n            return node.getAttribute(name)\n        }\n    },\n    text(node, string) {\n        if (arguments.length === 2) {\n            if ('innerText' in node) {\n                node.innerHTML = string\n            } else {\n                node.textContent = string\n            }\n        } else if (arguments.length === 1) {\n            if ('innerText' in node) {\n                return node.innerText\n            } else {\n                return node.textContent\n            }\n        }\n    },\n    html(node, string) {\n        if (arguments.length === 2) {\n            node.innerHTML = string\n        } else if (arguments.length === 1) {\n            return node.innerHTML\n        }\n    },\n    style(node, name, value) {\n        if (arguments.length === 3) {\n            //dom.style(element, 'color', 'red')\n            node.style[name] = value\n        } else if (arguments.length === 2) {\n            if (typeof name === 'string') {\n                //dom.style(element, 'color')\n                node.style[name] = value\n                return node.style[name]\n            } else if (name instanceof Object) {\n                //dom.style(element, {color:'red',border:'1px solid red')\n                const obj = name\n                for (let key in obj) {\n                    node.style[key] = obj[key]\n                }\n            }\n        }\n    },\n    class: {\n        add(node, className) {\n            node.classList.add(className)\n        },\n        remove(node, className){\n            node.classList.remove(className)\n        },\n        has(node, className){\n            return node.classList.contains(className)\n        }\n    },\n    on(node, eventName, fn) {\n        node.addEventListener(eventName, fn)\n    },\n    off(node, eventName, fn) {\n        node.removeAttribute(eventName, fn)\n    },\n    find(selector, scope) {\n        return (scope || document).querySelectorAll(selector)\n    },\n    parent(node) {\n        return node.parentNode\n    },\n    child(node) {\n        return node.children\n    },\n    siblings(node) {\n        //返回所有兄弟姐妹数组，但不包括自己\n        return Array.from(node.parentNode.children).filter(n => n !== node)\n    },\n    next(node) { //返回兄弟元素\n        let x = node.nextSibling\n        //节点类型常量，3 = 文字\n        //todo https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\n        //代码意思是排除元素之间的“文字”元素，如“回车、空格等”\n        while (x && x.nodeType === 3) {\n            x = x.nextSibling\n        }\n        return x\n    },\n    previous(node) { //\n        let x = node.previousSibling\n        while (x && x.nodeType === 3) {\n            x = x.previousSibling\n        }\n        return x\n    },\n    each(nodeList, fn) {\n        for (let i = 0; i < nodeList.length; i++) {\n            fn.call(null, nodeList[i])\n        }\n    },\n    index(node) {\n        const list = dom.child(node.parentNode);\n        let i\n        for (i = 0; i < list.length; i++) {\n            if (list[i] === node) {\n                break\n            }\n        }\n        return i\n    }\n};"]}